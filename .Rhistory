install.packages("wakefield")
library(wakefield)
tmp = r_data_frame(
n = 500,
race
)
View(tmp)
tmp = r_data_frame(
n = 500,
age,
race,
income,
military
)
View(tmp)
tmp = r_data_frame(
n = 500,
age,
race,
income = rnorm(mean=40000),
military
)
View(tmp)
tmp = r_data_frame(
n = 500,
age,
race,
income = rnorm(mean=40000, sd=20000),
military
)
View(tmp)
install.packages("keras")
load("~/Documents/Academics/News Deserts/data/scripts/20220908_added_median_income.RData")
library(readr)
thrc_data_v1_3_cleaned <- read_csv("Documents/Academics/Teaching/Data Sets/thrc_data_v1_3_cleaned.csv")
View(thrc_data_v1_3_cleaned)
data = thrc_data_v1_3_cleaned
library(readr)
incarceration_trends <- read_csv("Desktop/incarceration_trends.csv")
View(incarceration_trends)
data = incarceration_trends[incarceration_trends$state == "TX",]
fort_bend = data[data$county_name == "Fort Bend County",]
View(fort_bend)
install.packages("furrr")
setwd("~/Documents/Academics/TCHN")
library('dplyr')
library('stringr')
counties = read.csv('raw_data/counties.csv', row.names = FALSE)
counties = read.csv('raw_data/counties.csv')
View(counties)
acs_data = read.csv('raw_data/acs_data_latest.csv')
acs_data$County.Code = as.character(acs_data$County.Code)
acs_data$County.Code = str_pad(acs_data$County.Code, 3, pad="0")
acs_data$County.Code = paste(
"48",
acs_data$County.Code,
sep=""
)
acs_data$County.Code = as.integer(acs_data$County.Code)
acs_data = read.csv('raw_data/acs_data_latest.csv')
acs_data$County.Code = as.character(acs_data$County.Code)
acs_data$County.Code = str_pad(acs_data$County.Code, 3, pad="0")
acs_data$County.Code = paste(
"48",
acs_data$County.Code,
sep=""
)
acs_data$County.Code = as.integer(acs_data$County.Code)
counties = merge(counties, acs_data, by.x = 'fips', by.y = 'County.Code', all.x = TRUE)
rm(acs_data)
counties = counties %>% rename(
"Hispanic_Percent" = "ACS5Y2020_Hispanic_Percent",
"Education_Highschool_Percent" = "ACS5Y2020_Highschool_Percent",
"Education_GED_Percent" = "ACS5Y2020_GED_Percent",
"Education_Bachelors_Percent" = "ACS5Y2020_Bachelors_Percent",
"Education_Masters_Percent" = "ACS5Y2020_Masters_Percent",
"Education_Professional_Percent" = "ACS5Y2020_Professional_Percent",
"Education_Doctorate_Percent" = "ACS5Y2020_Doctorate_Percent",
"SNAP_Percent" = "ACS5Y2020_SNAP_Percent",
"Median_Household_Income" = "ACS5Y2020_Median.Household.Income",
"GINI_Index" = "ACS5Y2020_GINI_Index"
)
counties = read.csv('raw_data/counties.csv')
# MERGE ACS DATA
acs_data = read.csv('raw_data/acs_data_latest.csv')
acs_data$County.Code = as.character(acs_data$County.Code)
acs_data$County.Code = str_pad(acs_data$County.Code, 3, pad="0")
acs_data$County.Code = paste(
"48",
acs_data$County.Code,
sep=""
)
acs_data$County.Code = as.integer(acs_data$County.Code)
counties = merge(counties, acs_data, by.x = 'fips', by.y = 'County.Code', all.x = TRUE)
counties = counties %>% rename(
"Hispanic_Percent" = "ACS5Y2020_Hispanic_Percent",
"Education_Highschool_Percent" = "ACS5Y2020_Highschool_Percent",
"Education_GED_Percent" = "ACS5Y2020_GED_Percent",
"Education_Bachelors_Percent" = "ACS5Y2020_Bachelors_Percent",
"Education_Masters_Percent" = "ACS5Y2020_Masters_Percent",
"Education_Professional_Percent" = "ACS5Y2020_Professional_Percent",
"Education_Doctorate_Percent" = "ACS5Y2020_Doctorate_Percent",
"SNAP_Percent" = "ACS5Y2020_SNAP_Percent",
"Median_Household_Income" = "ACS5Y2020_Median.Household.Income",
"GINI_Index" = "ACS5Y2020_GINI_Index"
)
counties = read.csv('raw_data/counties.csv')
# MERGE ACS DATA
acs_data = read.csv('raw_data/acs_data_latest.csv')
acs_data$County.Code = as.character(acs_data$County.Code)
acs_data$County.Code = str_pad(acs_data$County.Code, 3, pad="0")
acs_data$County.Code = paste(
"48",
acs_data$County.Code,
sep=""
)
acs_data$County.Code = as.integer(acs_data$County.Code)
counties = merge(counties, acs_data, by.x = 'fips', by.y = 'County.Code', all.x = TRUE)
rm(acs_data)
counties = counties %>% rename(
"Hispanic_Percent" = "ACS5Y2020_Hispanic_Percent",
"Education_Highschool_Percent" = "ACS5Y2020_Highschool_Percent",
"Education_GED_Percent" = "ACS5Y2020_GED_Percent",
"Education_Bachelors_Percent" = "ACS5Y2020_Bachelors_Percent",
"Education_Masters_Percent" = "ACS5Y2020_Masters_Percent",
"Education_Professional_Percent" = "ACS5Y2020_Professional_Percent",
"Education_Doctorate_Percent" = "ACS5Y2020_Doctorate_Percent",
"SNAP_Percent" = "ACS5Y2020_SNAP_Percent",
"Median_Household_Income" = "ACS5Y2020_Median.Household.Income",
"GINI_Index" = "ACS5Y2020_GINI_Index",
"Unemployment_Percent" = "ACS5Y2020_Unemployment_Percent",
"Poverty_Percent" = "ACS5Y2020_Poverty_Percent"
)
data = select(data, -c('X'))
counties = select(counties, -c('X'))
tdshs_birth_defects_2017 = read.csv('raw_data/tdshs/tdshs_birth_defects_all_2017.csv')
tdshs_birth_defects_2013 = read.csv('raw_data/tdshs/tdshs_birth_defects_all_2013.csv')
tdshs_birth_defects_2014 = read.csv('raw_data/tdshs/tdshs_birth_defects_all_2014.csv')
tdshs_birth_defects_2015 = read.csv('raw_data/tdshs/tdshs_birth_defects_all_2015.csv')
tdshs_birth_defects_2016 = read.csv('raw_data/tdshs/tdshs_birth_defects_all_2016.csv')
tdshs_birth_defects_2017 = read.csv('raw_data/tdshs/tdshs_birth_defects_all_2017.csv')
tdshs_birth_defects = rbind(tdshs_birth_defects_2013, tdshs_birth_defects_2014, tdshs_birth_defects_2015, tdshs_birth_defects_2016, tdshs_birth_defects_2017)
colnames(tdshs_birth_defects)
# Reduce
tdshs_birth_defects = select(tdshs_birth_defects, c(`County.Name`, `YearText`,`Prevalence.per.10.000.Live.Births.along.`))
# Fix columns
tdshs_birth_defects$Prevalence.per.10.000.Live.Births.along. = as.numeric(tdshs_birth_defects$Prevalence.per.10.000.Live.Births.along.)
View(tdshs_birth_defects)
tdshs_birth_defects_latest =  tdshs_birth_defects %>%
group_by(YearText) %>%
filter(value == max(value))
tdshs_birth_defects_latest =  tdshs_birth_defects %>%
group_by(YearText) %>%
filter(YearText == max(YearText))
tdshs_birth_defects_latest =  tdshs_birth_defects %>%
filter(YearText == max(YearText))
View(tdshs_birth_defects_latest)
tdshs_birth_defects = tdshs_birth_defects %>% rename(
"Birth_Defects_Per_10k" = "Prevalence.per.10.000.Live.Births.along."
)
# Reduce to latest year for merge
tdshs_birth_defects_latest =  tdshs_birth_defects %>%
filter(YearText == max(YearText))
tdshs_birth_defects_latest = select(tdshs_birth_defects_latest, -c('YearText'))
?merge
tmp = left_join(counties, tdshs_birth_defects_latest, by = c('Name', 'County.Name') )
tmp_by = join_by('Name' == 'County.Name')
setwd("~/Documents/Academics/TCHN")
library('dplyr')
library('stringr')
tmp_by = join_by('Name' == 'County.Name')
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "chron", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "evaluate", "fansi", "forcats", "foreign", "fs", "future", "gargle", "geniusr", "ggplot2", "highr", "htmltools", "htmlwidgets", "hunspell", "igraph", "isoband", "jsonlite", "keras", "knitr", "lifecycle", "listenv", "lubridate", "markdown", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pkgbuild", "pkgload", "plyr", "png", "processx", "ps", "purrr", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rlang", "rmarkdown", "rpart", "sass", "spatial", "stringi", "stringr", "survival", "sys", "tensorflow", "testthat", "textcat", "tfruns", "tidyr", "tidyselect", "tidytext", "tinytex", "tokenizers", "utf8", "vctrs", "vroom", "whisker", "writexl", "xfun", "XML", "yaml"))
tmp = left_join(counties, tdshs_birth_defects_latest, tmp_by )
